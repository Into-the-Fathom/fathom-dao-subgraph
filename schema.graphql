# GOVERNANCE

type GovernanceStat @entity {
  id: ID! 
  totalProposalsCount: BigInt!
}

type Proposal @entity {
  id: ID!
  proposalId: BigInt!
  proposer: Bytes!
  startBlock: BigInt!
  endBlock: BigInt! 
  description: String! 
  againstVotes: BigInt!
  forVotes: BigInt!
  abstainVotes: BigInt!
  values: [BigInt!]!
  signatures: [String!]!
  calldatas: [Bytes!]!
  targets: [String!]!
  blockNumber: BigInt!
  blockTimestamp: BigInt! 
  transaction: Bytes!
}

# STAKING

type ProtocolStat @entity {
  id: ID! 
  totalStakeFTHM: BigInt! 
  totalVotes: BigInt!
  totalStakeEvents: BigInt!
  totalUnstakeEvents: BigInt!
  stakingAPR: BigInt!
  oneDayRewards: BigInt!
}

type Staker @entity {
  id: String!
  address: Bytes!
  totalStaked: BigInt!
  accruedRewards: BigInt!
  accruedVotes: BigInt! 
  claimedAmount: BigInt!
  stakes: [StakedEvent!]! @derivedFrom(field: "staker")
  lockPositions: [LockPosition!]! @derivedFrom(field: "staker")
  lockPositionIds: [String!]!
  lockPositionCount: BigInt!
  cooldown: BigInt!
}

type StakedEvent @entity {
  id: ID!
  account: Bytes! 
  amount: BigInt!
  streamShares: BigInt!
  nVoteToken: BigInt!
  lockId: BigInt!
  staker: Staker!
  blockNumber: BigInt!
  blockTimestamp: BigInt! 
  transaction: Bytes!
}

type UnstakedEvent @entity {
  id: ID!
  account: Bytes! 
  amount: BigInt!
  lockId: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt! 
  transaction: Bytes!
}

type LockPosition @entity {
  id: ID!
  account: Bytes
  streamShares: BigInt!
  nVoteToken: BigInt!
  amount: BigInt!
  lockId: BigInt!
  staker: Staker
  end: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt! 
  transaction: Bytes!
  isNotEarlyUnstakeable: Boolean
}

type Stream @entity {
  id: ID!
  time: [BigInt!]!
  reward: [BigInt!]!
  cooldownPeriod: BigInt!
}


